//Laxkit TODO file

/*! \page todo To Do




\section generaltodo General Laxkit To Dos
<pre>

gotta make a compiler aid:
 lax-config --cppflags --ldflags --libs --ldstaticflags --version --help --use* --cpp
			--make-laxrc <-- dump a generic laxrc to stdout with lots of comments to say how to modify it.

Ultimately need to have pictures of the various widgets in the docs..


TODO RIGHT NOW:
fluid-esque code generation tool
start thinking about portability, particularly to osx, make a non-gnu file
 to provide gnu things like getline() and get_current_dir_name() that are not provided on,
 for instance, bsd-ish osx..


---GRAPHICS---
this could be part of a more comprehensive system that allows hotswapping the
whole graphics backend. The required bits are:
 font search and selection
 text out
 text out at angle
 text out by affine transform 
 line segments
 clear window
 polylines, optionally filled
 circles/ellipses at any angle
 Get/Set line width, color, dash, join, butt
 Get/Set drawing function: solid, or xor..
 image control (this is already abstracted enough):
  definitely loading, perhaps saving
  copy image
  blit image with additional transparency at any angle, by an arbitrary affine matrix
  get a generic buffer from an image, and set an image from a generic buffer
 
 don't think core lax uses more than that.
   dodads, like bevels, drawing triangle things like eject button etc. 
   could depend on the above..

This covers all the basic Laxkit controls. more specific drawing abilities are
wrapped in Displayer objects. Currently, the only implemented Displayer is based on
pure Xlib functions. there could be a CairoDisplayer, AntigrainDisplayer,
Imlib2Displayer, ImagemagickDisplayer, etc.


TO ENHANCE:
ini file to attribute converter
Could put all the pure math stuff in LaxMath namespace?
 this includes transformmath, vectors, and interfaces/bezier math
Could put strmanip.cc/.h in LaxStr namespace.


FEATURE WISHING:
 use graphicsmagick/fontconfig/Xft/freetype/Xrender, how about pango? antigrain?
 gl support
 auto double buffering?
 thread safety
 (in progress) drag n drop


--Thoughts on themes--
If more than just simple colors were to be changed, what would be required? seems
like each refresh of every function would have to be externally redefinable, which
would suck.. maybe just stick to simple color changes..
Otherwise would have to have Laxkit namespace classes use a similar objectfactory
setup as LaxInterfaces, and the theme modifies the factory to return subclasses
of all the core classes. Bleah!
Alternately, refreshing functions would need to isolate relevant data to pass to arbitrary functions.
Probably more trouble than it's worth.


---SHORTCUTS---
see also shortcut.cc (which is a work in progress)
from shortcut.cc:
 * A window would define a list of actions, and store a list of shortcuts pointing to those actions.
 * In the window's CharInput(ch,state) function, the action number is found from it's (redefinable) shortcuts
 * and something like thewindow->action(shortcut->action) is called.
 *
 * The default shortcuts can be overridden in rc files such as the main ~/.lax/laxrc. They
 * can be loaded and saved via the LaxFiles::Attribute sort of format.
 *
 * ***need mechanism for chaining key shortcuts:
 * For instance, defining a shortcut that is shift-control-'a' followed by "chain", it is
 * listed like this: --- though chaining makes the input that much more complicated requires window
 * remembering what's been pressed. or could lump yet ANOther chore on anXApp, which is to build up 
 * the key shortcut based on the shortcut list stored by the window. that would mean restructuring
 * anXWindow, since it is there that Xlib key codes are translated into keys.. that has to change
 * anyway in conversion to utf8......



---WIDGET TODO---
number sliders, like Num: 255 [----------*---]
SliderInputPopup?== list to select from, or type in choice, remember last few typed in choices: 2 lists...
table frames
multirow/col frames
fuller print dialog
font dialog
detail selector/record selector
tree selector
color selection dialog


CLEAN UP:
FileDialog and FilePreviewer
no zoom, viewerwindow but with integers (ScrolledWindow)
SplitWindow
Focus handling, especially for popups REALLY SUCKS right now
MenuSelector and friends
BoxArrange/RowFrame and friends
put in whattypes for all classes
(in process) perhaps redo the whole events setup. relying on X atoms leaves quite a lot of
  residue in the X server..
when a child window is destroyed, sometimes the parent doesn't know it.
  perhaps there could be a built in procedure to keep track of that..
  related:****** popup up dialogs and other controls that have owners, if the owner is destroyed,
	then the window is no longer valid!


</pre>

\section specifictodo Specific To Dos
<hr>

*/
